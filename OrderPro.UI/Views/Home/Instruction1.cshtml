@model List<OrderPro.UI.Models.FtpsFile>
@using OrderPro.UI.Models
@using System.Collections.Generic

@{   

    int i = 0;
    List<Imagetag> imagetag = new List<Imagetag>();                                      
    string OrderReference=ViewBag.OrderRef;
    int TotalImage = ViewBag.TotalImage;
    string SmallName = "";
    
    
  }
<style>
.imagePreview {background-color:#e6e8e7 !important;min-height: 500px; margin-right: 1px;}
.hyperlink {text-decoration:underline !important;cursor:pointer}
.shadow {border:1px solid black;/*width:95% !important;*/-webkit-box-shadow: 0px 3px 15px 6px rgba(85,120,224,0.79);-moz-box-shadow: 0px 3px 15px 6px rgba(85,120,224,0.79);box-shadow: 0px 3px 15px 6px rgba(85,120,224,0.79); height:100%;width:100% }
.remove {border:none;/*width:100% !important;*/-webkit-box-shadow:none;-moz-box-shadow:none;box-shadow:none;height:100%;width:100%}
.rowContent {padding-top:10px;padding-bottom:15px;}
.Insheader {font-family:'Times New Roman';font-style:italic;padding-bottom:3px;}
.DisImg {height:100%;width:100%;}
.lblImg {font-size: small;text-align: left;}
.lbldiv {
    /*background-color:#18c12b;color:white;*/
    border:1px solid #18c12b;border-radius:2px;}
.imgview {
    /*width: 200px !important;height: 300px !important;*/ 
    background-color:white !important; }
.btn {padding: 4px 12px !important; }  /*for apply and cancel button*/ 
 .pera{margin:0px 0px 0px 0px !important;padding:0px !important;font-family:'Times New Roman';font-size:9px !important;}
</style>

<div class="row rowContent">
    <div class="col-xs-5 col-sm-5 col-md-5">
        <div class="form-group ">
            <label class="service-title">2. Select image complexity</label>
            <ul class="select_format">
              @if (ViewBag.Complexity != null)
              {
               foreach (var service in ViewBag.Complexity)
                {                                            
                <li><span class="radio-button">
                <input type="radio" id="@service.Reference" name="services" onclick="SelectComplexity(this.id)">
                <label><span class="send-quote new-one">@service.Level (@service.Description)</span></label></span></li>                    
                }
              }                              
           </ul>
        </div>

        <div class="form-group ">
            <label class="service-title">3. Select your preferred file format</label>
            <ul class="select_format">
                <li>                   
                    <input type="checkbox" class="radio" value="JPG" id="jpg" name="format[]" required="required">    @*onclick="PreferredFormat(this.id)"*@
                    <label><span class="send-quote new-one">JPG</span><span class="option-text">Ready to use</span></label></li>
                <li>
                    <input type="checkbox" class="radio" value="PNG" id="png" name="format[]" required="required">
                    <label><span class="send-quote new-one">PNG</span><span class="option-text">Ready to use</span></label></li>
                <li>
                    <input type="checkbox" class="radio" value="PSD" id="psd" name="format[]" required="required">
                    <label><span class="send-quote new-one">PSD</span><span class="option-text">Ready to use</span></label></li>
                <li>
                    <input type="checkbox" class="radio" value="Any Format" id="Any Format" name="format[]" required="required">
                    <label><span class="send-quote new-one">Any format</span><span class="option-text">Ready to use</span></label></li>
            </ul>
        </div>

        <div class="form-group ">
            <label class="service-title">4. Enter specific instructions (If any)</label>            
            <textarea id="instruction" name="specificinstruction" maxlength="50" class="intruction_area" placeholder="Enter your instructions"></textarea>
        </div>
       
        <div class="form-group">
              <div id="imgLoad">
              <a id="Apply"  class="btn btn-primary btn-md" onclick="AddInstruction()" role="button">Apply</a>
              <a id="Cancel"  class="btn btn-default btn-md" onclick="CancelInstruction()" role="button">Cancle</a>
              </div>
              <div id="load2" style="display:none">
              <img src="~/Images/loading.gif" height="70" />
              </div>
                    
        </div>
    </div>

    <div class="col-xs-7 col-sm-5 col-md-7">
       
        <div class="row Insheader">
            Select the images and specify the complexity and preferred file formats
        </div>
        <div class="row imagePreview">

            @foreach (var item in Model)
            {
                <div class="col-sm-3 col-xs 3 imgview">
                    <p>
                        @if (item.Name.Length > 13)
                        {
                            string[] s = item.Name.Split('.');
                            SmallName = s[0].Substring(0, 5) + ".." + s[1];
                        }
                        else
                        {
                            SmallName = item.Name;
                        }
                        @SmallName
                    </p>

                    <img id="@item.Id" style="width:80%;height:70%" class="DisImg" src="@Url.Action("Thumbnail", "Home", new { width = 200, height = 200, ClientCode = ViewBag.ClientCode, Ordername = ViewBag.OrderNumber, ImageName = item.Name })" alt="@item.Name" onclick="SelectImage(this.id,@item.lblId)" />
                    <label id="@item.lblId" class="lblImg"></label>
                </div>
                //i++;
            }
        </div>

        <div class="row" style="padding-top:5px">

            <div class="col-xs-6" style="padding-left:0px !important;">
                <a id="AllSelection" class="hyperlink" onclick="SelectAllImage()">Select All</a>
                <a id="ClearSelection" class="hyperlink" onclick="DeselectImage()">Clear All</a>
            </div>
            

            <div class="col-xs-2">Total Images</div>
            <div class="col-xs-2">Uploaded:@ViewBag.TotalImage</div>
            <div class="col-xs-2">Specified:<span id="Specified"></span></div>
           

        </div>
       
          <input type="text" id="totalImage" style="display:none" value="@ViewBag.TotalImage" />
          @Html.Hidden("OrderRef",(string)ViewBag.OrderRef)     
          @Html.Hidden("UserEmail",(string)ViewBag.UserName)
          @Html.Hidden("OrderNo",(string)ViewBag.OrderNo)     
          @Html.Hidden("ServiceName",(string)ViewBag.serviceName)
          @Html.Hidden("ServiceRef",(string)ViewBag.ServiceRef)         

            <div class="row" style="text-align:right;padding-top:15px;margin-right:5px">
                <div id="Sendbtn">
                    <a id="order" class="btnNext">CONTINUE</a>                    
                </div>
                <div id="load" style="display: none">
                    <img src="~/Images/loading.gif" height="70" />
                </div>
            </div>
        </div>    
</div>

    <script>

    //global variable
    var selectedImageId = "";
    var Complexity = "";
    var DeliveryFormat = "";
    var things = [];

    var AllImages = [];

    var GlobalModel;

    // A $( document ).ready() block. to parse model list when page load
    @*$(document).ready(function () {

            GlobalModel = '@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model))';
            GlobalModel = JSON.parse(GlobalModel);

            things = [];
            $.each(GlobalModel, function (index, data) {
                var lblId = data.lblId;
                var imgId = data.Id;

                alert(imgId);
                //push this data into global variable because viewbug session may lost

               things.push({ id: lblId, imageId: imgId });
                //you next code
               alert(index + ' index image id:' + things[index].imageId + ' lbl id:' + things[index].id);
               document.getElementById(imgId).className = "shadow";

            });
        });*@

    function SelectAllImage() {

       // alert('hited');
        try {
            //to do ajax call

            DisableButton();

            var Order = document.getElementById("OrderNo").value;
            $.ajax({

                contentType: 'application/json; charset=utf-8',
                dataType: 'json',
                type: 'GET',
                url: '@Url.Action("SelectAllImage", "Home")',    //'/Home/AddInstruction',

                data: { OrderNo: Order },


                success: function (result) {
                    console.log('After success result:' + result.message);
                    if (result.message = "True") {

                        if (things.length > 0)
                            RemoveSelectedImage();
                        else
                            things = []; //newly declare

                        alert('success');
                        // alert('arr: ' + arr);
                        ////arr = new Array();
                        //things = [];
                        //console.log('assigning new list of obj :' + things.length);

                        $.each(result.ImageList, function (index, item) {

                            alert(item.imageId);
                            things.push({ id: index, imageId: item.imageId });
                            document.getElementById(item.imageId).className = "shadow";
                        });



                    } else {
                        console.log('After Failed result:' + result.message);
                        alert("Sorry..Can not select.try again.");


                    }

                    EnableButton();
                },

                error: function (jqXHR, exception) {
                    RemoveSelectedImage();
                    var msg = '';
                    if (jqXHR.status === 0) {
                        msg = 'Not connect.\n Verify Network.Try again.';
                    } else if (jqXHR.status == 404) {
                        msg = 'Requested page not found. [404].Try again.' + exception.message;
                    } else if (jqXHR.status == 500) {
                        msg = 'Internal Server Error [500].Try again.';
                    } else if (exception === 'parsererror') {
                        msg = 'Requested JSON parse failed.Try Again.';
                    } else if (exception === 'timeout') {
                        msg = 'Time out error.Try Again';
                    } else if (exception === 'abort') {
                        msg = 'Ajax request aborted.Try Again.';
                    } else {
                        msg = 'Uncaught Error.\n' + jqXHR.responseText;
                    }
                    alert("Can not select images.Error:" + msg);

                    EnableButton();
                }
            });
        }
        catch (err) {
            EnableButton();
            console.log(err.message);
            return false;
        }
    }



    $('#order').click(function () {

        try {

            console.log('Click Order Pre');


            //check if any file upload or not
            var instruction = document.getElementById("instruction").value;
            var totalImage = document.getElementById("totalImage").value;

            var orderRef = document.getElementById("OrderRef").value;
            var userEmail = document.getElementById("UserEmail").value;
            var serviceRef = document.getElementById("ServiceRef").value;

            console.log("Order ref" + OrderRef + " total Image:" + totalImage + " user:" + userEmail);

            if (Complexity != "" && Complexity != null) {  //instruction != "" && instruction != null &&

                console.log("Hit Instruction Successful.");
                DisableButton();
                $.ajax({

                    type: 'GET',
                    url: '@Url.Action("VarifiedInstruction", "Home")',

                    data: {
                        OrderRef: orderRef,
                        TotalImage: totalImage

                    },
                    traditional: true,
                    contentType: 'application/json; charset=utf-8',

                    //,string

                    success: function (result) {

                        // alert(result.message);
                        console.log("Hit Order Successful.Result" + result.message);
                        if (result.message === "True") {

                            var url = "@Url.Action("OrderPre", "Home")";
                            console.log("After Url." + url);
                            // var name = 'from checkout'; //pass parameter
                            $.get(url, { ServiceRef: serviceRef, UserName: userEmail, OrderRef: orderRef }, function (data) {

                                //  EnableButton();

                                $("#target").html(data);
                                EnableButton();
                            });

                        } else if (result.message === "SetAllImageComplexity") {
                            alert('Some Image are not set Complexity!!');
                            EnableButton();
                        }
                        else if (result.message === "PleaseAddComplexity") {
                            alert('Please add Complexity and Delivery format for all Images!!');
                            EnableButton();
                        } else if (result.message === "Can not find Order Reference!") {
                            alert('Can not find Order Reference.Please try again or Contact with us.');
                            EnableButton();
                        }
                        else {

                            alert(result.message);
                            EnableButton();
                        }
                        //Enable Next Button

                        //document.getElementById("load").style.display = "none";
                        //document.getElementById("Sendbtn").style.display = "block";
                    },

                    error: function (jqXHR, exception) {
                        var msg = '';
                        if (jqXHR.status === 0) {
                            msg = 'Not connect.\n Verify Network.Try again.';
                        } else if (jqXHR.status == 404) {
                            msg = 'Requested page not found. [404].Try again.';
                        } else if (jqXHR.status == 500) {
                            msg = 'Internal Server Error [500].Try again.';
                        } else if (exception === 'parsererror') {
                            msg = 'Requested JSON parse failed.Try Again.';
                        } else if (exception === 'timeout') {
                            msg = 'Time out error.Try Again';
                        } else if (exception === 'abort') {
                            msg = 'Ajax request aborted.Try Again.';
                        } else {
                            msg = 'Uncaught Error.\n' + jqXHR.responseText;
                        }
                        alert("Error:" + msg);

                        EnableButton();
                       
                    }
                });

            } else {
                EnableButton();                
                alert('Add Instruction and Complexity!!');
            }


            return false;
        } catch (err) {
            EnableButton();           
            console.log(err.message);
            return false;
        }
    })



    function DisableButton() {
        //Disable Next button after uploading image enable this
        document.getElementById("load").style.display = "block";
        document.getElementById("load2").style.display = "block";

        document.getElementById("Sendbtn").style.display = "none";
        document.getElementById("imgLoad").style.display = "none";

    }

    function EnableButton() {
        //Enable Next Button
        document.getElementById("load").style.display = "none";
        document.getElementById("load2").style.display = "none";

        document.getElementById("Sendbtn").style.display = "block";
        document.getElementById("imgLoad").style.display = "block";

    }

    function hasInstruction() {
        var value = document.getElementById("order_name").value;
        if (value.length > 50) {
            alert("Max length exists.");
        }
    }

    function hasOrderName() {
        var value = document.getElementById("instruction").value;
    }


    function SelectComplexity(e) {
        Complexity = e;
        //alert(Complexity);
    }


    //arr[i] = new Array(2);
    //arr[i][0] = e.toString();
    //arr[i][1] = i.toString();

    function SelectImage(e, i) {

        console.log('img id:' + e + ' lable id:' + i)
        var className = "shadow";
        var hasClass = document.getElementById(e).className.match(className);  //new RegExp('(\\s|^)' + className + '(\\s|$)')
        console.log('has class:' + hasClass);

        var index = i;
        var imageId = e;

        if (hasClass != className) {

            try {
                console.log('add image into list because class does not match')

                things.push({ id: i, imageId: e });

                document.getElementById(e).className = "shadow";

            } catch (err) {
                alert('Class Add error:' + err);
            }
        }
        else {
            console.log('hit else condition because class matched.');
            try {

                var listToDelete = [i];        //['abc', 'efg'];

                things.reduceRight(function (acc, obj, idx) {
                    if (listToDelete.indexOf(obj.id) > -1)
                        things.splice(idx, 1);
                }, 0);

                document.getElementById(e).className = "remove";

            } catch (err) {
                alert('Class remove err:' + err.message);
            }
        }

    }

    //function PreferredFormat(e) {
    //    DeliveryFormat = e;
    //    // alert(DeliveryFormat);
    //}
   
    $('input.radio').on('change', function () {
        $('input.radio').not(this).prop('checked', false);      
        DeliveryFormat = this.id;
        //alert(DeliveryFormat);
    });

    function AddInstruction() {
        //alert('hited');

        var ins = document.getElementById("instruction").value;
        var orderRef=document.getElementById("OrderRef").value;

        if (things.length < 1)   //arr.length < 1
            alert("Please select Images for add instruction !!");
            //else if (ins == null || ins == "")
            //     alert("Please insert your instruction !!");
        else if (Complexity == null || Complexity == "")
            alert("Select a Complexity.");
        else if (DeliveryFormat == null || DeliveryFormat == "")
            alert("Select a Delivery Format.");

        else {

            DisableButton();

            //ajax call to add instruction
            try {
                console.log('before hit.display all Images');



                for (var i = 0; i < things.length; i++) {
                    console.log('id:' + things[i].id + ' img id:' + things[i].imageId);
                }
                things = JSON.stringify({ 'things': things,'OrderRef':orderRef, 'Instruction': ins, 'Complexity': Complexity, 'PreferredFormat': DeliveryFormat });
                $.ajax({

                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: 'POST',
                    url: '@Url.Action("AddInstruction", "Home")',    //'/Home/AddInstruction',

                    data: things,

                    // traditional: true,



                    success: function (result) {
                        console.log('After success result:' + result.message);
                        if (result.message = "True") {


                            // alert('arr: ' + arr);
                            //arr = new Array();
                            things = [];
                            console.log('assigning new list of obj :' + things.length);

                            $.each(result.ImageList, function (index, item) {
                                //index is row and item contains data

                                //alert('ImgId :' + item.ImgId);
                                //alert('lableId :' + item.lableId);
                                //alert('Instruction :' + item.Instruction);
                                //alert('Complexity :' + item.Complexity);

                                document.getElementById(item.ImgId).className = "remove";
                                document.getElementById(item.lableId).innerHTML = '<div class="lbldiv"><p class="pera">' + item.Instruction + '</p><p class="pera">Complexity:' + item.Complexity + '</p><p class="pera">' + result.DeliveryFormat + '</p></div>';
                            });

                            document.getElementById("Specified").innerHTML = result.Specified;

                        } else {
                            console.log('After Failed result:' + result.message + ' Image List length:' + images.length);
                            RemoveSelectedImage();
                            alert("Instruction saved failed.Error:" + result.message + "! Try again..");


                        }

                        EnableButton();
                    },

                    error: function (jqXHR, exception) {
                      
                        var msg = '';
                        if (jqXHR.status === 0) {
                            msg = 'Not connect.\n Verify Network.Try again.';
                        } else if (jqXHR.status == 404) {
                            msg = 'Requested page not found. [404].Try again.' + exception.message;
                        } else if (jqXHR.status == 500) {
                            msg = 'Internal Server Error [500].Try again.';
                        } else if (exception === 'parsererror') {
                            msg = 'Requested JSON parse failed.Try Again.';
                        } else if (exception === 'timeout') {
                            msg = 'Time out error.Try Again';
                        } else if (exception === 'abort') {
                            msg = 'Ajax request aborted.Try Again.';
                        } else {
                            msg = 'Uncaught Error.\n' + jqXHR.responseText;
                        }
                        alert("Can not add Instruction.Error:" + msg);

                        EnableButton();
                    }
                });

            } catch (err) {
               
                alert(err.message);
                EnableButton();
            }

            RemoveSelectedImage();
        }
    }


    function DeselectImage() {

        console.log('Image List length:' + things.length);
        //remove border shawdow
        RemoveSelectedImage();
    }

    function RemoveSelectedImage() {
        console.log(' length' + things.length);
        //remove border shawdow
        for (var i = 0; i < things.length; i++) {  // arr.length
            try {

                //array pop
                console.log('first array lable id:' + things[i].id + ' Image Id:' + things[i].imageId);

                //split the array
                //var res = arr[i].split(",");
                var imgId = things[i].imageId;                   //res[0];
                var lblId = things[i].id;                    //res[1];

                // alert('Image Id:' + imgId + ' lable Id:' + lblId + '  Index:' + i);      document.getElementById(lblId).innerHTML = "";

                console.log('Image Id:' + imgId + ' lable Id:' + lblId);
                document.getElementById(imgId).className = "remove";



            } catch (err) {

                console.log('exception:' + err.message);
            }
        }

        //declare array new object so previous will be null      
        things = [];
        console.log('Js list Object newly declared:' + things.length);
    }


    function CancelInstruction() {
        if (things.length > 0) {

            //To do if array has then check is the lable id has any html content if not then delete this row from array list
            //because this image does not provide any complexity
            //Cancel Instruction complxcity
            var orderRef = document.getElementById("OrderRef").value;
            if (things != null) {

                try {
                    console.log('before cancel Instruction.');
                    //now check from client if any
                    DisableButton();

                    things = JSON.stringify({ 'things': things, 'OrderRef': orderRef });
                    $.ajax({

                        contentType: 'application/json; charset=utf-8',
                        dataType: 'json',
                        type: 'POST',
                        url: '@Url.Action("RemoveInstruction","Home")',
                        data: things,

                        //traditional: true,

                        success: function (result) {
                            if (result.message = "True") {

                                console.log('Cancel result:' + result.message);
                                things = [];

                                $.each(result.ImageList, function (index, item) {
                                    //index is row and item contains data

                                    //alert('ImgId :' + item.ImgId);
                                    //alert('lableId :' + item.lableId);
                                    //alert('Instruction :' + item.Instruction);
                                    //alert('Complexity :' + item.Complexity);

                                    document.getElementById(item.ImgId).className = "remove";
                                    document.getElementById(item.lableId).innerHTML = "";
                                });

                                console.log(result.Specified);
                                document.getElementById("Specified").innerHTML = result.Specified;
                            }
                            else if (result.message == "") {
                               // RemoveSelectedImage()
                                console.log('Cancel result:' + result.message);
                            }
                            else {
                               // RemoveSelectedImage();
                                console.log('Cancel result:' + result.message);
                                alert("Instruction Cancelled failed! Try again..");
                            }

                            EnableButton();

                        },


                        error: function (jqXHR, exception) {
                            console.log('Cancel result:' + result.message);
                            //RemoveSelectedImage();
                            var msg = '';
                            if (jqXHR.status === 0) {
                                msg = 'Not connect.\n Verify Network.Try again.';
                            } else if (jqXHR.status == 404) {
                                msg = 'Requested page not found. [404].Try again.';
                            } else if (jqXHR.status == 500) {
                                msg = 'Internal Server Error [500].Try again.';
                            } else if (exception === 'parsererror') {
                                msg = 'Requested JSON parse failed.Try Again.';
                            } else if (exception === 'timeout') {
                                msg = 'Time out error.Try Again';
                            } else if (exception === 'abort') {
                                msg = 'Ajax request aborted.Try Again.';
                            } else {
                                msg = 'Uncaught Error.\n' + jqXHR.responseText;
                            }
                            alert("Error:" + msg);

                            EnableButton();
                        }
                    });

                } catch (err) {

                   // RemoveSelectedImage();
                    alert(err.message);
                    EnableButton();
                }
            } else {

                alert("Please select image for cancel instruction.");
            }

            RemoveSelectedImage();

        } else {

            alert("Please select images to remove their Instruction!");
        }

        RemoveSelectedImage();
    }

    </script>



